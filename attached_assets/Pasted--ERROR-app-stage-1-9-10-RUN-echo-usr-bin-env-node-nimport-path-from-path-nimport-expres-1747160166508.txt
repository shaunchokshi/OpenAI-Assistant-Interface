 => ERROR [app stage-1  9/10] RUN echo '#!/usr/bin/env node\nimport path from "path";\nimport express from "ex  0.2s
------
 > [app stage-1  9/10] RUN echo '#!/usr/bin/env node\nimport path from "path";\nimport express from "express";\nimport compression from "compression";\nimport helmet from "helmet";\nimport { registerRoutes } from "./dist/server/routes.js";\nimport { logger } from "./dist/server/logger.js";\n\nconst app = express();\n\n// Apply security headers\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: ["\'self\'"],\n      scriptSrc: ["\'self\'", "\'unsafe-inline\'", "\'unsafe-eval\'"],\n      styleSrc: ["\'self\'", "\'unsafe-inline\'", "https://fonts.googleapis.com"],\n      imgSrc: ["\'self\'", "data:", "https://platform-lookaside.fbsbx.com", "https://avatars.githubusercontent.com"],\n      fontSrc: ["\'self\'", "https://fonts.gstatic.com"],\n      connectSrc: ["\'self\'", "https://api.openai.com"]\n    }\n  }\n}));\n\n// Compression middleware\napp.use(compression());\n\n// Body parsers\napp.use(express.json({ limit: "50mb" }));\napp.use(express.urlencoded({ extended: false, limit: "50mb" }));\n\n// Serve static assets\nconst distPath = path.resolve("./dist/client");\napp.use(express.static(distPath));\n\nasync function startServer() {\n  // Register API routes\n  const server = await registerRoutes(app);\n\n  // Serve SPA index.html for all other routes\n  app.get("*", (req, res) => {\n    res.sendFile(path.resolve(distPath, "index.html"));\n  });\n\n  // Start the server\n  const PORT = process.env.PORT || 5000;\n  server.listen(PORT, "0.0.0.0", () => {\n    logger.info(`Server started and listening on port ${PORT}`);\n  });\n\n  // Handle graceful shutdown\n  process.on("SIGTERM", () => {\n    logger.info("SIGTERM signal received, shutting down server");\n    server.close(() => {\n      logger.info("Server closed");\n      process.exit(0);\n    });\n  });\n}\n\nstartServer().catch(err => {\n  console.error("Failed to start server:", err);\n  process.exit(1);\n});\n' > production-server.js:
0.159 /bin/sh: 1: Syntax error: Unterminated quoted string
------
failed to solve: process "/bin/sh -c echo '#!/usr/bin/env node\\nimport path from \"path\";\\nimport express from \"express\";\\nimport compression from \"compression\";\\nimport helmet from \"helmet\";\\nimport { registerRoutes } from \"./dist/server/routes.js\";\\nimport { logger } from \"./dist/server/logger.js\";\\n\\nconst app = express();\\n\\n// Apply security headers\\napp.use(helmet({\\n  contentSecurityPolicy: {\\n    directives: {\\n      defaultSrc: [\"\\'self\\'\"],\\n      scriptSrc: [\"\\'self\\'\", \"\\'unsafe-inline\\'\", \"\\'unsafe-eval\\'\"],\\n      styleSrc: [\"\\'self\\'\", \"\\'unsafe-inline\\'\", \"https://fonts.googleapis.com\"],\\n      imgSrc: [\"\\'self\\'\", \"data:\", \"https://platform-lookaside.fbsbx.com\", \"https://avatars.githubusercontent.com\"],\\n      fontSrc: [\"\\'self\\'\", \"https://fonts.gstatic.com\"],\\n      connectSrc: [\"\\'self\\'\", \"https://api.openai.com\"]\\n    }\\n  }\\n}));\\n\\n// Compression middleware\\napp.use(compression());\\n\\n// Body parsers\\napp.use(express.json({ limit: \"50mb\" }));\\napp.use(express.urlencoded({ extended: false, limit: \"50mb\" }));\\n\\n// Serve static assets\\nconst distPath = path.resolve(\"./dist/client\");\\napp.use(express.static(distPath));\\n\\nasync function startServer() {\\n  // Register API routes\\n  const server = await registerRoutes(app);\\n\\n  // Serve SPA index.html for all other routes\\n  app.get(\"*\", (req, res) => {\\n    res.sendFile(path.resolve(distPath, \"index.html\"));\\n  });\\n\\n  // Start the server\\n  const PORT = process.env.PORT || 5000;\\n  server.listen(PORT, \"0.0.0.0\", () => {\\n    logger.info(`Server started and listening on port ${PORT}`);\\n  });\\n\\n  // Handle graceful shutdown\\n  process.on(\"SIGTERM\", () => {\\n    logger.info(\"SIGTERM signal received, shutting down server\");\\n    server.close(() => {\\n      logger.info(\"Server closed\");\\n      process.exit(0);\\n    });\\n  });\\n}\\n\\nstartServer().catch(err => {\\n  console.error(\"Failed to start server:\", err);\\n  process.exit(1);\\n});\\n' > production-server.js" did not complete successfully: exit code: 2